package gd.eggs.mvc.model
{


	/**
	 * Базова�? модель данных. От �?того кла�?�?а на�?ледует�?�? главна�? модель
	 * так же в�?е ветки и параметры которые должны автообновл�?ть�?�? от �?ервера
	 * должны на�?ледовать�?�? от �?того кла�?�?а. В�?е данные которые автообновл�?ют�?�?
	 * можно будет до�?тать из �?той ча�?ти модели геттером data.
	 * так же рекомендует�?�? добавить в�?е необходимые геттеры в каждом потомке
	 * дабы избежать лишней точки в имени параметра.
	 *
	 * В�?е изве�?тные параметры в приход�?щих �? �?ервера данных должны быть добавлены в _data в кон�?трукторе:
	 *        _data.someParam = new SomeClass(); //SomeClass - Это либо что-то из базовых типов, либо очередной потомок BaseDataModel
	 *
	 * так же при необходимо�?ти �?ледует оверрайдить метод: updateNoKey(key:Object, data:Object) - �?тот метод занимает�?�? заполнением данных
	 * имени которых не нашел в _data.
	 *
	 * @author Dukobpa3
	 */
	public class BaseDataModel extends BaseModel
	{
		/** Объект дл�? данных �?ервера */
		protected var _data:Object;

		/**
		 * Кон�?труктор. Тут инициалирует�?�? композици�? �? объектов-контенйером дл�? автообновл�?емых данных.
		 * так же нужно в кон�?тркуторе указывать инициализацию в�?ех нужных параметров нуждающих�?�? в автообновл�?ении и в�?тавл�?ть их в �?тот объект.
		 * Имена параметров должны в точно�?ти �?овпадать �? �?ерверными.
		 */
		public function BaseDataModel()
		{
			super();
			_data = {};
		}

		//-----------------------------
		//	PRIVATE
		//-----------------------------
		/**
		 * Пропихивает данные полученные �? �?ервера по веткам моделей.
		 * @param    data
		 */
		protected function updateData(data:Object):void
		{
			for (var key:String in data) // проходим по каждому ключу данных
			{
				if (_data.hasOwnProperty(key)) // е�?ли в дате е�?ть такой ключ
				{
					if (_data[key] is BaseDataModel) // и е�?ли �?тот ключ �?вл�?ет�?�? BaseDataModel
					{
						_data[key].updateData.call(this, data[key]) // значит в нем должен быть метод автоапдейта. Запу�?каем его
					}
					else
					{
						_data[key] = data[key]; // Иначе данные принимаем за базовый тип и про�?то приравниваем
					}
				}
				else // е�?ли же такого ключа нету
				{
					updateNoKey(key, data[key]); // то запу�?каем функцию занимающую�?�? обновлением без ключей.
				}

				update(key); // Кричим во вьюху что изменили параметр.
			}
		}

		/**
		 * Оверрайдим там где надо.
		 * @param    key
		 * @param    data
		 */
		protected function updateNoKey(key:String, data:Object):void
		{
			trace(key);
			_data[key] = data;
		}

		//=============================
		//	ACCESSORS
		//=============================

		/**
		 * Возвращает о�?новной контейнер �? автообновл�?емыми данными
		 */
		public function get data():Object
		{ return _data; }

	}

}